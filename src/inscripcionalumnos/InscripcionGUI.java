/* 
 * Copyright (C) 2017 dnloop
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package inscripcionalumnos;
// BeginProto
import java.awt.Component;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
// EndProto
import motor.*;
/**
 *
 * @author dnloop
 */
public class InscripcionGUI extends javax.swing.JFrame {

    /**
     * Estas variables fueron creadas para prototipo
     * se requieren metodos de acceso para establecer los datos 
     * desde el login
     */
    private String sql;
    private String alu = "1";
    
    Conector con = new Conector();
    
    public InscripcionGUI() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMaterias = new javax.swing.JTable();
        jPanelBotonera = new javax.swing.JPanel();
        jButtonInscripcion = new javax.swing.JButton();
        jButtonVerMaterias = new javax.swing.JButton();
        jButtonDesinscripcion = new javax.swing.JButton();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuInicio = new javax.swing.JMenu();
        jMenuItemSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Inscripcion Alumnos");
        setMinimumSize(new java.awt.Dimension(606, 170));

        jTableMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Materia", "Fecha", "Inscripci贸n"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableMaterias);

        jButtonInscripcion.setText("Inscripci贸n");
        jButtonInscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInscripcionActionPerformed(evt);
            }
        });

        jButtonVerMaterias.setText("Ver Materias");
        jButtonVerMaterias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerMateriasActionPerformed(evt);
            }
        });

        jButtonDesinscripcion.setText("Desinscripci贸n");
        jButtonDesinscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDesinscripcionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBotoneraLayout = new javax.swing.GroupLayout(jPanelBotonera);
        jPanelBotonera.setLayout(jPanelBotoneraLayout);
        jPanelBotoneraLayout.setHorizontalGroup(
            jPanelBotoneraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoneraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBotoneraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonInscripcion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVerMaterias, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDesinscripcion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 6, Short.MAX_VALUE))
        );
        jPanelBotoneraLayout.setVerticalGroup(
            jPanelBotoneraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBotoneraLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonInscripcion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonVerMaterias)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDesinscripcion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuInicio.setMnemonic('i');
        jMenuInicio.setText("Inicio");

        jMenuItemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuInicio.add(jMenuItemSalir);

        jMenuBar.add(jMenuInicio);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelBotonera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelBotonera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>                        
    // test code
            
    public void cargarTabla(ResultSet objResultSet) throws SQLException {
        /** 
         * Se le pasan los objetos ResultSet y JTable 
         */
        
        /* Necesaria la conversi贸n de tipo para evitar incompatibilidad de objetos */
        DefaultTableModel modelo =  (DefaultTableModel) jTableMaterias.getModel();
        
        // warning
        jTableMaterias.getModel();
	    int row = jTableMaterias.getRowCount();
	    for (int i = 0; i < row ; i++) 
            modelo.removeRow(0);
        // warning
        
        jTableMaterias.setModel(modelo);
        /* Extraer numero de columnas */
        ResultSetMetaData metaData = objResultSet.getMetaData();
        int numCol = metaData.getColumnCount();
        //System.out.println(numCol);
        /***/
        if (objResultSet.isBeforeFirst()) {
            while(objResultSet.next()){
                Object [] columna = new Object[numCol];
                for (int i = 0; i < numCol; i++) {
                    columna[i] = objResultSet.getObject(i + 1);
                }
                modelo.addRow(columna);
            }
        }
    } // public void cargarTabla(ResultSet objResultSet) throws SQLException
            
    // test code
    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {                                               
        System.exit(0);
    }                                              

    private void jButtonInscripcionActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        int row;
        int flag = 0; // controla valores repetidos
        Component frame = null;
        /* Cantidad de objetos en jTableMaterias*/
        row = jTableMaterias.getRowCount();
        Object [][] jTabla = new Object[row][2];
        System.out.println(row);
        /* DEBUGGING */
//        if (jTabla == null) {
//            flag = 1;
//            System.out.println("I'm NULL - first check");
//        } else
//            System.out.println("Not NULL - first check");
        /* Cargar objeto para comprobar elementos repetidos */
        for (int i = 0; i < row; i++) {
            if (jTableMaterias.getValueAt(i, 2) != null) {
                try{
                    if ((boolean)jTableMaterias.getValueAt(i, 2)) {
                        jTabla[i][0] = jTableMaterias.getModel().getValueAt(i, 1);
                        jTabla[i][1] = jTableMaterias.getModel().getValueAt(i, 2);
                    System.out.println("### BEGDebug ###");
                    System.out.printf("fecha: %s%n" , jTabla[i][0].toString());
                    System.out.printf("check: %s%n" , jTabla[i][1].toString());
                    System.out.println("### ENDDebug ###");
                        //System.out.println("I'm true");
                        flag += 1;
                        } else
                            System.out.println("I'm false");
                } catch(NullPointerException fueraRango){
                    /*
                     * genera error al querer extraer la fecha
                     * pero no le estoy entendiendo bien =(
                     * no puedo replicar el bichito.
                     * # nota: Parece que esta l贸gica es
                     * # aplicable s贸lo en la b煤squeda.
                     */
                    System.out.println("Exception thrown");
                    //fueraRango.getMessage();
                }
            } //else # DEBUGGING 
                //System.out.println("I'm null");
        }
        System.out.printf("bandera %d%n",flag);
        /* Buscar repetidos */
        if (flag != 0) {
            /*
             * Si no hay elementos 
             * nulos realizar la b煤squeda 
             */
            System.out.println("[Searching...]");
            int len = jTabla.length;
            System.out.println(len);
            // nota: mejorar algoritmos de b煤squeda, esto es semi-pat茅tico
            row -= 1;
                for (int i = 0; i < row; i++) {
//                    System.out.println("### BEGDebug ###");
//                    System.out.printf("fecha: %s%n" , jTabla[i][0].toString());
//                    System.out.printf("check: %s%n" , jTabla[i][1].toString());
//                    System.out.println("### ENDDebug ###");
                    if (jTabla[i][1] == jTabla[i+1][1]) {
                        JOptionPane.showMessageDialog(frame, 
                            "No se puede inscribir a m谩s de una materia por d铆a.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    } else if (rootPaneCheckingEnabled) {
                        
                    } else {
                        /* Cargar Inscripcion a la base de datos */
                        try{
                            System.out.println("[SQLquery]");
                                    sql = "SELECT materias.nombre, mesas.fechaMesa FROM materias, mesas "
                                    + "WHERE mesas.idMesa=materias.idMesa AND materias.idMateria IN "
                                    + "(SELECT idMateria FROM materiasHabilitadas WHERE idAlumno= " + this.alu 
                                    + " AND habilitado=1)";
                                Connection db = con.conexion();
                                Statement stmt = db.createStatement();
                                Consulta query = new Consulta(stmt);
                                ResultSet rs = query.consulta(sql);
                                cargarTabla(rs);    
                        } catch(SQLException ex){
                                ex.getMessage();
                                con.setConexion(null);
//                            System.out.printf("fecha: %s%n" , jTabla[0][0].toString());
//                            System.out.printf("check: %s%n" , jTabla[1][1].toString());
                        } catch(NullPointerException nullPointer) {
                            System.out.println("###Testing###");
//                            System.out.printf("fecha: %s%n" , jTabla[0][0].toString());
                            /* el programa debe evitar llegar a esta instancia
                             * refinando el for
                             */
                        } finally {
                                con.desconectar();
                            }
                    }
                }
        } else
            System.out.println("[Empty]");
    }                                                  

    private void jButtonVerMateriasActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // Tracer
        Component frame = null; // reposiciona las variables, no seas puerco
        sql = "SELECT materias.nombre, mesas.fechaMesa FROM materias, mesas "
            + "WHERE mesas.idMesa=materias.idMesa AND materias.idMateria IN "
            + "(SELECT idMateria FROM materiasHabilitadas WHERE idAlumno= " + this.alu 
            + " AND habilitado=1)";
        try{      
            Connection db = con.conexion();
            Statement stmt = db.createStatement();
            Consulta query = new Consulta(stmt);
            
            ResultSet rs = query.consulta(sql);
            /* tipos y propiedades de las columnas */
            //ResultSetMetaData metaData = rs.getMetaData();
            
//            if (!query.cargarTabla(rs, jTableMaterias)) {
//                JOptionPane.showMessageDialog(frame, 
//                    "Fallo al cargar resultados.","Error", 
//                    JOptionPane.ERROR_MESSAGE);
//            } else
//                JOptionPane.showMessageDialog(frame, "[OK] - Nuestro amor no es eterno.");
            
            cargarTabla(rs);    
        } catch(SQLException ex){
            ex.printStackTrace();
            con.setConexion(null);
        } finally {
            con.desconectar();
        } 
    }                                                  

    private void jButtonDesinscripcionActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        
    }                                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inscripcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InscripcionGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonDesinscripcion;
    private javax.swing.JButton jButtonInscripcion;
    private javax.swing.JButton jButtonVerMaterias;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuInicio;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JPanel jPanelBotonera;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMaterias;
    // End of variables declaration                   
}
